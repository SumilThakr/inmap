// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eioserve.proto

/*
Package eiopb is a generated protocol buffer package.

It is generated from these files:
	eioserve.proto

It has these top-level messages:
	Selectors
	SCCInfo
	Selection
	Point
	Rectangle
	ColorInfo
*/
package eiopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Selectors struct {
	Names  []string  `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
	Values []float32 `protobuf:"fixed32,2,rep,packed,name=Values" json:"Values,omitempty"`
}

func (m *Selectors) Reset()                    { *m = Selectors{} }
func (m *Selectors) String() string            { return proto.CompactTextString(m) }
func (*Selectors) ProtoMessage()               {}
func (*Selectors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Selectors) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Selectors) GetValues() []float32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type SCCInfo struct {
	SCC  string  `protobuf:"bytes,1,opt,name=SCC" json:"SCC,omitempty"`
	Desc string  `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
	Frac float32 `protobuf:"fixed32,3,opt,name=Frac" json:"Frac,omitempty"`
}

func (m *SCCInfo) Reset()                    { *m = SCCInfo{} }
func (m *SCCInfo) String() string            { return proto.CompactTextString(m) }
func (*SCCInfo) ProtoMessage()               {}
func (*SCCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SCCInfo) GetSCC() string {
	if m != nil {
		return m.SCC
	}
	return ""
}

func (m *SCCInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SCCInfo) GetFrac() float32 {
	if m != nil {
		return m.Frac
	}
	return 0
}

type Selection struct {
	DemandGroup      string `protobuf:"bytes,1,opt,name=DemandGroup" json:"DemandGroup,omitempty"`
	DemandSector     string `protobuf:"bytes,2,opt,name=DemandSector" json:"DemandSector,omitempty"`
	ProductionGroup  string `protobuf:"bytes,3,opt,name=ProductionGroup" json:"ProductionGroup,omitempty"`
	ProductionSector string `protobuf:"bytes,4,opt,name=ProductionSector" json:"ProductionSector,omitempty"`
	ImpactType       string `protobuf:"bytes,5,opt,name=ImpactType" json:"ImpactType,omitempty"`
	DemandType       string `protobuf:"bytes,6,opt,name=DemandType" json:"DemandType,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Selection) GetDemandGroup() string {
	if m != nil {
		return m.DemandGroup
	}
	return ""
}

func (m *Selection) GetDemandSector() string {
	if m != nil {
		return m.DemandSector
	}
	return ""
}

func (m *Selection) GetProductionGroup() string {
	if m != nil {
		return m.ProductionGroup
	}
	return ""
}

func (m *Selection) GetProductionSector() string {
	if m != nil {
		return m.ProductionSector
	}
	return ""
}

func (m *Selection) GetImpactType() string {
	if m != nil {
		return m.ImpactType
	}
	return ""
}

func (m *Selection) GetDemandType() string {
	if m != nil {
		return m.DemandType
	}
	return ""
}

type Point struct {
	X float32 `protobuf:"fixed32,1,opt,name=X" json:"X,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=Y" json:"Y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Point) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Rectangle struct {
	LL *Point `protobuf:"bytes,1,opt,name=LL" json:"LL,omitempty"`
	LR *Point `protobuf:"bytes,2,opt,name=LR" json:"LR,omitempty"`
	UR *Point `protobuf:"bytes,3,opt,name=UR" json:"UR,omitempty"`
	UL *Point `protobuf:"bytes,4,opt,name=UL" json:"UL,omitempty"`
}

func (m *Rectangle) Reset()                    { *m = Rectangle{} }
func (m *Rectangle) String() string            { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()               {}
func (*Rectangle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Rectangle) GetLL() *Point {
	if m != nil {
		return m.LL
	}
	return nil
}

func (m *Rectangle) GetLR() *Point {
	if m != nil {
		return m.LR
	}
	return nil
}

func (m *Rectangle) GetUR() *Point {
	if m != nil {
		return m.UR
	}
	return nil
}

func (m *Rectangle) GetUL() *Point {
	if m != nil {
		return m.UL
	}
	return nil
}

type ColorInfo struct {
	RGB    [][]byte `protobuf:"bytes,1,rep,name=RGB,proto3" json:"RGB,omitempty"`
	Legend string   `protobuf:"bytes,2,opt,name=Legend" json:"Legend,omitempty"`
}

func (m *ColorInfo) Reset()                    { *m = ColorInfo{} }
func (m *ColorInfo) String() string            { return proto.CompactTextString(m) }
func (*ColorInfo) ProtoMessage()               {}
func (*ColorInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ColorInfo) GetRGB() [][]byte {
	if m != nil {
		return m.RGB
	}
	return nil
}

func (m *ColorInfo) GetLegend() string {
	if m != nil {
		return m.Legend
	}
	return ""
}

func init() {
	proto.RegisterType((*Selectors)(nil), "eiopb.Selectors")
	proto.RegisterType((*SCCInfo)(nil), "eiopb.SCCInfo")
	proto.RegisterType((*Selection)(nil), "eiopb.Selection")
	proto.RegisterType((*Point)(nil), "eiopb.Point")
	proto.RegisterType((*Rectangle)(nil), "eiopb.Rectangle")
	proto.RegisterType((*ColorInfo)(nil), "eiopb.ColorInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EIOServe service

type EIOServeClient interface {
	DemandGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	DemandSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	ProdGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	ProdSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error)
	SCCs(ctx context.Context, in *Selection, opts ...grpc.CallOption) (EIOServe_SCCsClient, error)
	MapInfo(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*ColorInfo, error)
	Geometry(ctx context.Context, in *Selection, opts ...grpc.CallOption) (EIOServe_GeometryClient, error)
}

type eIOServeClient struct {
	cc *grpc.ClientConn
}

func NewEIOServeClient(cc *grpc.ClientConn) EIOServeClient {
	return &eIOServeClient{cc}
}

func (c *eIOServeClient) DemandGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := grpc.Invoke(ctx, "/eiopb.EIOServe/DemandGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIOServeClient) DemandSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := grpc.Invoke(ctx, "/eiopb.EIOServe/DemandSectors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIOServeClient) ProdGroups(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := grpc.Invoke(ctx, "/eiopb.EIOServe/ProdGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIOServeClient) ProdSectors(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Selectors, error) {
	out := new(Selectors)
	err := grpc.Invoke(ctx, "/eiopb.EIOServe/ProdSectors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIOServeClient) SCCs(ctx context.Context, in *Selection, opts ...grpc.CallOption) (EIOServe_SCCsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EIOServe_serviceDesc.Streams[0], c.cc, "/eiopb.EIOServe/SCCs", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIOServeSCCsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EIOServe_SCCsClient interface {
	Recv() (*SCCInfo, error)
	grpc.ClientStream
}

type eIOServeSCCsClient struct {
	grpc.ClientStream
}

func (x *eIOServeSCCsClient) Recv() (*SCCInfo, error) {
	m := new(SCCInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eIOServeClient) MapInfo(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*ColorInfo, error) {
	out := new(ColorInfo)
	err := grpc.Invoke(ctx, "/eiopb.EIOServe/MapInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIOServeClient) Geometry(ctx context.Context, in *Selection, opts ...grpc.CallOption) (EIOServe_GeometryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EIOServe_serviceDesc.Streams[1], c.cc, "/eiopb.EIOServe/Geometry", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIOServeGeometryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EIOServe_GeometryClient interface {
	Recv() (*Rectangle, error)
	grpc.ClientStream
}

type eIOServeGeometryClient struct {
	grpc.ClientStream
}

func (x *eIOServeGeometryClient) Recv() (*Rectangle, error) {
	m := new(Rectangle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EIOServe service

type EIOServeServer interface {
	DemandGroups(context.Context, *Selection) (*Selectors, error)
	DemandSectors(context.Context, *Selection) (*Selectors, error)
	ProdGroups(context.Context, *Selection) (*Selectors, error)
	ProdSectors(context.Context, *Selection) (*Selectors, error)
	SCCs(*Selection, EIOServe_SCCsServer) error
	MapInfo(context.Context, *Selection) (*ColorInfo, error)
	Geometry(*Selection, EIOServe_GeometryServer) error
}

func RegisterEIOServeServer(s *grpc.Server, srv EIOServeServer) {
	s.RegisterService(&_EIOServe_serviceDesc, srv)
}

func _EIOServe_DemandGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIOServeServer).DemandGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eiopb.EIOServe/DemandGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIOServeServer).DemandGroups(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIOServe_DemandSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIOServeServer).DemandSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eiopb.EIOServe/DemandSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIOServeServer).DemandSectors(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIOServe_ProdGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIOServeServer).ProdGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eiopb.EIOServe/ProdGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIOServeServer).ProdGroups(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIOServe_ProdSectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIOServeServer).ProdSectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eiopb.EIOServe/ProdSectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIOServeServer).ProdSectors(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIOServe_SCCs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Selection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EIOServeServer).SCCs(m, &eIOServeSCCsServer{stream})
}

type EIOServe_SCCsServer interface {
	Send(*SCCInfo) error
	grpc.ServerStream
}

type eIOServeSCCsServer struct {
	grpc.ServerStream
}

func (x *eIOServeSCCsServer) Send(m *SCCInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _EIOServe_MapInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIOServeServer).MapInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eiopb.EIOServe/MapInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIOServeServer).MapInfo(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIOServe_Geometry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Selection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EIOServeServer).Geometry(m, &eIOServeGeometryServer{stream})
}

type EIOServe_GeometryServer interface {
	Send(*Rectangle) error
	grpc.ServerStream
}

type eIOServeGeometryServer struct {
	grpc.ServerStream
}

func (x *eIOServeGeometryServer) Send(m *Rectangle) error {
	return x.ServerStream.SendMsg(m)
}

var _EIOServe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eiopb.EIOServe",
	HandlerType: (*EIOServeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DemandGroups",
			Handler:    _EIOServe_DemandGroups_Handler,
		},
		{
			MethodName: "DemandSectors",
			Handler:    _EIOServe_DemandSectors_Handler,
		},
		{
			MethodName: "ProdGroups",
			Handler:    _EIOServe_ProdGroups_Handler,
		},
		{
			MethodName: "ProdSectors",
			Handler:    _EIOServe_ProdSectors_Handler,
		},
		{
			MethodName: "MapInfo",
			Handler:    _EIOServe_MapInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SCCs",
			Handler:       _EIOServe_SCCs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Geometry",
			Handler:       _EIOServe_Geometry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eioserve.proto",
}

func init() { proto.RegisterFile("eioserve.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xae, 0x93, 0xb4, 0x9e, 0x84, 0x12, 0x8d, 0x10, 0xb2, 0x10, 0x42, 0xd6, 0x72, 0xb1,
	0x10, 0x0a, 0x28, 0xa5, 0x07, 0xae, 0xb8, 0x10, 0x45, 0x32, 0x50, 0xad, 0x29, 0x6a, 0x8f, 0xae,
	0x33, 0x54, 0x91, 0x12, 0xaf, 0xb5, 0x76, 0x90, 0x7a, 0xe6, 0x61, 0x79, 0x00, 0x5e, 0x00, 0xed,
	0xd8, 0x49, 0x53, 0x02, 0xa8, 0xbd, 0xcd, 0x7c, 0xdf, 0xcc, 0x37, 0x3b, 0x3f, 0x0b, 0x87, 0x34,
	0x37, 0x15, 0xd9, 0xef, 0x34, 0x2a, 0xad, 0xa9, 0x0d, 0x76, 0x69, 0x6e, 0xca, 0x4b, 0xf5, 0x16,
	0xfc, 0x94, 0x16, 0x94, 0xd7, 0xc6, 0x56, 0xf8, 0x08, 0xba, 0x9f, 0xb2, 0x25, 0x55, 0x81, 0x08,
	0xbd, 0xc8, 0xd7, 0x8d, 0x83, 0x8f, 0xa1, 0xf7, 0x35, 0x5b, 0xac, 0xa8, 0x0a, 0x64, 0xe8, 0x45,
	0x52, 0xb7, 0x9e, 0x8a, 0x61, 0x3f, 0x8d, 0xe3, 0x69, 0xf1, 0xcd, 0xe0, 0x10, 0xbc, 0x34, 0x8e,
	0x03, 0x11, 0x8a, 0xc8, 0xd7, 0xce, 0x44, 0x84, 0xce, 0x09, 0x55, 0x79, 0x20, 0x19, 0x62, 0xdb,
	0x61, 0x1f, 0x6c, 0x96, 0x07, 0x5e, 0x28, 0x22, 0xa9, 0xd9, 0x56, 0x3f, 0xc5, 0xfa, 0x01, 0x73,
	0x53, 0x60, 0x08, 0xfd, 0x13, 0x5a, 0x66, 0xc5, 0x6c, 0x62, 0xcd, 0xaa, 0x6c, 0xf5, 0xb6, 0x21,
	0x54, 0x30, 0x68, 0xdc, 0x94, 0xdf, 0xdc, 0xea, 0xdf, 0xc2, 0x30, 0x82, 0x87, 0xa7, 0xd6, 0xcc,
	0x56, 0xac, 0xd9, 0x28, 0x79, 0x1c, 0xf6, 0x27, 0x8c, 0x2f, 0x60, 0x78, 0x03, 0xb5, 0x8a, 0x1d,
	0x0e, 0xdd, 0xc1, 0xf1, 0x19, 0xc0, 0x74, 0x59, 0x66, 0x79, 0xfd, 0xe5, 0xba, 0xa4, 0xa0, 0xcb,
	0x51, 0x5b, 0x88, 0xe3, 0x9b, 0x57, 0x30, 0xdf, 0x6b, 0xf8, 0x1b, 0x44, 0x3d, 0x87, 0xee, 0xa9,
	0x99, 0x17, 0x35, 0x0e, 0x40, 0x9c, 0x73, 0x6b, 0x52, 0x8b, 0x73, 0xe7, 0x5d, 0x70, 0x17, 0x52,
	0x8b, 0x0b, 0xf5, 0x43, 0x80, 0xaf, 0x29, 0xaf, 0xb3, 0xe2, 0x6a, 0x41, 0xf8, 0x14, 0x64, 0x92,
	0x70, 0x68, 0x7f, 0x3c, 0x18, 0xf1, 0xc2, 0x46, 0xac, 0xa1, 0x65, 0x92, 0x30, 0xab, 0x39, 0x75,
	0x97, 0xd5, 0x8e, 0x3d, 0xd3, 0xdc, 0xf7, 0x0e, 0x7b, 0xd6, 0xb0, 0x09, 0xb7, 0xba, 0xcb, 0x26,
	0xea, 0x18, 0xfc, 0xd8, 0x2c, 0x8c, 0x5d, 0xef, 0x56, 0x4f, 0xde, 0xf1, 0x49, 0x0c, 0xb4, 0x33,
	0xdd, 0x41, 0x24, 0x74, 0x45, 0xc5, 0xac, 0x9d, 0x7e, 0xeb, 0x8d, 0x7f, 0x49, 0x38, 0x78, 0x3f,
	0xfd, 0x9c, 0xba, 0x2b, 0xc3, 0x37, 0xeb, 0x45, 0xf1, 0xa4, 0x2b, 0x1c, 0xb6, 0x55, 0x36, 0xcb,
	0x7e, 0x72, 0x1b, 0x31, 0xb6, 0x52, 0x7b, 0x78, 0x0c, 0x0f, 0xb6, 0x57, 0x79, 0xd7, 0xb4, 0x31,
	0x80, 0xdb, 0xd7, 0xbd, 0x4a, 0x1d, 0x41, 0xdf, 0xe5, 0xdc, 0xaf, 0xd0, 0x4b, 0xe8, 0xa4, 0x71,
	0xfc, 0xb7, 0xe8, 0xc3, 0x35, 0xd2, 0x7c, 0x09, 0xb5, 0xf7, 0x5a, 0xe0, 0x2b, 0xd8, 0xff, 0x98,
	0x95, 0xcd, 0x14, 0xff, 0x29, 0xbf, 0x99, 0x34, 0xf7, 0x71, 0x30, 0x21, 0xb3, 0xa4, 0xda, 0x5e,
	0xff, 0x27, 0x63, 0x73, 0x20, 0xae, 0xc8, 0x65, 0x8f, 0xff, 0xf3, 0xd1, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd7, 0xfb, 0x44, 0x66, 0xe1, 0x03, 0x00, 0x00,
}
